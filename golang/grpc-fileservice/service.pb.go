// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package fileservice is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Empty
	Chunk
	DownloadRequest
*/
package fileservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Chunk struct {
	Hash     string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Chunk) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Chunk) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DownloadRequest struct {
	Hash string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
}

func (m *DownloadRequest) Reset()                    { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()               {}
func (*DownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DownloadRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "fileservice.Empty")
	proto.RegisterType((*Chunk)(nil), "fileservice.Chunk")
	proto.RegisterType((*DownloadRequest)(nil), "fileservice.DownloadRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for File service

type FileClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (File_UploadClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (File_DownloadClient, error)
}

type fileClient struct {
	cc *grpc.ClientConn
}

func NewFileClient(cc *grpc.ClientConn) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Upload(ctx context.Context, opts ...grpc.CallOption) (File_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_File_serviceDesc.Streams[0], c.cc, "/fileservice.File/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploadClient{stream}
	return x, nil
}

type File_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type fileUploadClient struct {
	grpc.ClientStream
}

func (x *fileUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploadClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (File_DownloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_File_serviceDesc.Streams[1], c.cc, "/fileservice.File/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type File_DownloadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type fileDownloadClient struct {
	grpc.ClientStream
}

func (x *fileDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for File service

type FileServer interface {
	Upload(File_UploadServer) error
	Download(*DownloadRequest, File_DownloadServer) error
}

func RegisterFileServer(s *grpc.Server, srv FileServer) {
	s.RegisterService(&_File_serviceDesc, srv)
}

func _File_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).Upload(&fileUploadServer{stream})
}

type File_UploadServer interface {
	SendAndClose(*Empty) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type fileUploadServer struct {
	grpc.ServerStream
}

func (x *fileUploadServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _File_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServer).Download(m, &fileDownloadServer{stream})
}

type File_DownloadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type fileDownloadServer struct {
	grpc.ServerStream
}

func (x *fileDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _File_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fileservice.File",
	HandlerType: (*FileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _File_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _File_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0xcb, 0xcc, 0x49, 0x85,
	0x0a, 0x29, 0xb1, 0x73, 0xb1, 0xba, 0xe6, 0x16, 0x94, 0x54, 0x2a, 0x79, 0x73, 0xb1, 0x3a, 0x67,
	0x94, 0xe6, 0x65, 0x0b, 0x09, 0x71, 0xb1, 0x64, 0x24, 0x16, 0x67, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x81, 0xd9, 0x42, 0x52, 0x5c, 0x1c, 0x20, 0x4d, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x4c,
	0x60, 0x71, 0x38, 0x1f, 0xa4, 0x3e, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x59, 0x81, 0x51, 0x83, 0x27,
	0x08, 0xcc, 0x56, 0x52, 0xe5, 0xe2, 0x77, 0xc9, 0x2f, 0xcf, 0xcb, 0xc9, 0x4f, 0x4c, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x81, 0x1b, 0xcb, 0x84, 0x30, 0xd6, 0xa8, 0x8a, 0x8b, 0xc5, 0x2d,
	0x33, 0x27, 0x55, 0xc8, 0x88, 0x8b, 0x2d, 0xb4, 0x00, 0xa4, 0x58, 0x48, 0x48, 0x0f, 0xc9, 0x71,
	0x7a, 0x60, 0x07, 0x49, 0xa1, 0x8a, 0x81, 0x5d, 0xab, 0xc1, 0x28, 0x64, 0xc7, 0xc5, 0x01, 0xb3,
	0x42, 0x48, 0x06, 0x45, 0x05, 0x9a, 0xcd, 0x52, 0x58, 0xcc, 0x34, 0x60, 0x4c, 0x62, 0x03, 0x07,
	0x86, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x36, 0xdf, 0xd2, 0x3b, 0x1d, 0x01, 0x00, 0x00,
}
