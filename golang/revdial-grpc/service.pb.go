// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package revdialgrpc is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Empty
	GreetMsg
	GreetReply
	ExecCommand
	ExecStream
*/
package revdialgrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GreetMsg struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *GreetMsg) Reset()                    { *m = GreetMsg{} }
func (m *GreetMsg) String() string            { return proto.CompactTextString(m) }
func (*GreetMsg) ProtoMessage()               {}
func (*GreetMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GreetMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GreetReply struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Homedir  string `protobuf:"bytes,3,opt,name=homedir" json:"homedir,omitempty"`
}

func (m *GreetReply) Reset()                    { *m = GreetReply{} }
func (m *GreetReply) String() string            { return proto.CompactTextString(m) }
func (*GreetReply) ProtoMessage()               {}
func (*GreetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GreetReply) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *GreetReply) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *GreetReply) GetHomedir() string {
	if m != nil {
		return m.Homedir
	}
	return ""
}

type ExecCommand struct {
	Name string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Arg  []string `protobuf:"bytes,2,rep,name=arg" json:"arg,omitempty"`
}

func (m *ExecCommand) Reset()                    { *m = ExecCommand{} }
func (m *ExecCommand) String() string            { return proto.CompactTextString(m) }
func (*ExecCommand) ProtoMessage()               {}
func (*ExecCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExecCommand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecCommand) GetArg() []string {
	if m != nil {
		return m.Arg
	}
	return nil
}

type ExecStream struct {
	// Types that are valid to be assigned to Log:
	//	*ExecStream_Stdout
	//	*ExecStream_Stderr
	Log isExecStream_Log `protobuf_oneof:"Log"`
}

func (m *ExecStream) Reset()                    { *m = ExecStream{} }
func (m *ExecStream) String() string            { return proto.CompactTextString(m) }
func (*ExecStream) ProtoMessage()               {}
func (*ExecStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isExecStream_Log interface{ isExecStream_Log() }

type ExecStream_Stdout struct {
	Stdout string `protobuf:"bytes,1,opt,name=Stdout,oneof"`
}
type ExecStream_Stderr struct {
	Stderr string `protobuf:"bytes,2,opt,name=Stderr,oneof"`
}

func (*ExecStream_Stdout) isExecStream_Log() {}
func (*ExecStream_Stderr) isExecStream_Log() {}

func (m *ExecStream) GetLog() isExecStream_Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *ExecStream) GetStdout() string {
	if x, ok := m.GetLog().(*ExecStream_Stdout); ok {
		return x.Stdout
	}
	return ""
}

func (m *ExecStream) GetStderr() string {
	if x, ok := m.GetLog().(*ExecStream_Stderr); ok {
		return x.Stderr
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecStream) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecStream_OneofMarshaler, _ExecStream_OneofUnmarshaler, _ExecStream_OneofSizer, []interface{}{
		(*ExecStream_Stdout)(nil),
		(*ExecStream_Stderr)(nil),
	}
}

func _ExecStream_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecStream)
	// Log
	switch x := m.Log.(type) {
	case *ExecStream_Stdout:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Stdout)
	case *ExecStream_Stderr:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Stderr)
	case nil:
	default:
		return fmt.Errorf("ExecStream.Log has unexpected type %T", x)
	}
	return nil
}

func _ExecStream_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecStream)
	switch tag {
	case 1: // Log.Stdout
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Log = &ExecStream_Stdout{x}
		return true, err
	case 2: // Log.Stderr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Log = &ExecStream_Stderr{x}
		return true, err
	default:
		return false, nil
	}
}

func _ExecStream_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecStream)
	// Log
	switch x := m.Log.(type) {
	case *ExecStream_Stdout:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Stdout)))
		n += len(x.Stdout)
	case *ExecStream_Stderr:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Stderr)))
		n += len(x.Stderr)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Empty)(nil), "revdialgrpc.Empty")
	proto.RegisterType((*GreetMsg)(nil), "revdialgrpc.GreetMsg")
	proto.RegisterType((*GreetReply)(nil), "revdialgrpc.GreetReply")
	proto.RegisterType((*ExecCommand)(nil), "revdialgrpc.ExecCommand")
	proto.RegisterType((*ExecStream)(nil), "revdialgrpc.ExecStream")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	Greet(ctx context.Context, in *GreetMsg, opts ...grpc.CallOption) (*GreetReply, error)
	Exec(ctx context.Context, in *ExecCommand, opts ...grpc.CallOption) (Greeter_ExecClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Greet(ctx context.Context, in *GreetMsg, opts ...grpc.CallOption) (*GreetReply, error) {
	out := new(GreetReply)
	err := grpc.Invoke(ctx, "/revdialgrpc.Greeter/Greet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Exec(ctx context.Context, in *ExecCommand, opts ...grpc.CallOption) (Greeter_ExecClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/revdialgrpc.Greeter/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ExecClient interface {
	Recv() (*ExecStream, error)
	grpc.ClientStream
}

type greeterExecClient struct {
	grpc.ClientStream
}

func (x *greeterExecClient) Recv() (*ExecStream, error) {
	m := new(ExecStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	Greet(context.Context, *GreetMsg) (*GreetReply, error)
	Exec(*ExecCommand, Greeter_ExecServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revdialgrpc.Greeter/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Greet(ctx, req.(*GreetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecCommand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).Exec(m, &greeterExecServer{stream})
}

type Greeter_ExecServer interface {
	Send(*ExecStream) error
	grpc.ServerStream
}

type greeterExecServer struct {
	grpc.ServerStream
}

func (x *greeterExecServer) Send(m *ExecStream) error {
	return x.ServerStream.SendMsg(m)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "revdialgrpc.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _Greeter_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _Greeter_Exec_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0xd3, 0x34, 0xed, 0x14, 0x41, 0x06, 0xc4, 0xa5, 0x07, 0x29, 0x7b, 0xea, 0x29,
	0x88, 0x3d, 0x78, 0xf0, 0xa6, 0x94, 0x7a, 0x50, 0x0f, 0x29, 0x78, 0x5f, 0x93, 0x21, 0x0d, 0x74,
	0xbb, 0x61, 0xb2, 0x2d, 0xf6, 0xe4, 0x57, 0x97, 0xdd, 0xa4, 0x36, 0xda, 0xdb, 0x9b, 0x3f, 0xbf,
	0xe5, 0xcd, 0x5b, 0xb8, 0xac, 0x89, 0xf7, 0x65, 0x46, 0x49, 0xc5, 0xc6, 0x1a, 0x1c, 0x33, 0xed,
	0xf3, 0x52, 0x6d, 0x0a, 0xae, 0x32, 0x19, 0x43, 0xb4, 0xd0, 0x95, 0x3d, 0xc8, 0x5b, 0x18, 0x2e,
	0x99, 0xc8, 0xbe, 0xd5, 0x05, 0x22, 0xf4, 0xdf, 0x95, 0x26, 0x11, 0x4c, 0x83, 0xd9, 0x28, 0xf5,
	0x5a, 0x7e, 0x00, 0xf8, 0x79, 0x4a, 0xd5, 0xe6, 0x80, 0x13, 0x18, 0xae, 0x4d, 0x6d, 0xb7, 0xa7,
	0xad, 0xdf, 0xda, 0xd1, 0xbb, 0x9a, 0x58, 0xf4, 0x1a, 0xda, 0x69, 0x14, 0x10, 0xaf, 0x8d, 0xa6,
	0xbc, 0x64, 0x11, 0xfa, 0xf6, 0xb1, 0x94, 0x73, 0x18, 0x2f, 0xbe, 0x28, 0x7b, 0x36, 0x5a, 0xab,
	0x6d, 0xee, 0xe0, 0xce, 0xa3, 0x5e, 0xe3, 0x15, 0x84, 0x8a, 0x0b, 0xd1, 0x9b, 0x86, 0xb3, 0x51,
	0xea, 0xa4, 0x5c, 0x02, 0x38, 0x68, 0x65, 0x99, 0x94, 0x46, 0x01, 0x83, 0x95, 0xcd, 0xcd, 0xce,
	0x36, 0xd4, 0xcb, 0x45, 0xda, 0xd6, 0xed, 0x84, 0xb8, 0x35, 0xd3, 0x4e, 0x88, 0xf9, 0x29, 0x82,
	0xf0, 0xd5, 0x14, 0xf7, 0xdf, 0x10, 0xfb, 0xab, 0x88, 0xf1, 0x01, 0x22, 0x2f, 0xf1, 0x3a, 0xe9,
	0x04, 0x94, 0x1c, 0x43, 0x99, 0xdc, 0x9c, 0xb7, 0x9b, 0x2c, 0x1e, 0xa1, 0xef, 0xcc, 0xa0, 0xf8,
	0xb3, 0xd0, 0x39, 0xea, 0x1f, 0x7a, 0x72, 0x7e, 0x17, 0x7c, 0x0e, 0xfc, 0x9f, 0xcc, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xfd, 0x0e, 0x56, 0x8c, 0xa4, 0x01, 0x00, 0x00,
}
