// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubsub.proto

/*
Package pubsub is a generated protocol buffer package.

It is generated from these files:
	pubsub.proto

It has these top-level messages:
	Empty
	Message
*/
package pubsub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Message struct {
	Topic []byte `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetTopic() []byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pubsub.Empty")
	proto.RegisterType((*Message)(nil), "pubsub.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PublishService service

type PublishServiceClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (PublishService_PublishClient, error)
}

type publishServiceClient struct {
	cc *grpc.ClientConn
}

func NewPublishServiceClient(cc *grpc.ClientConn) PublishServiceClient {
	return &publishServiceClient{cc}
}

func (c *publishServiceClient) Publish(ctx context.Context, opts ...grpc.CallOption) (PublishService_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublishService_serviceDesc.Streams[0], c.cc, "/pubsub.PublishService/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &publishServicePublishClient{stream}
	return x, nil
}

type PublishService_PublishClient interface {
	Send(*Message) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type publishServicePublishClient struct {
	grpc.ClientStream
}

func (x *publishServicePublishClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publishServicePublishClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PublishService service

type PublishServiceServer interface {
	Publish(PublishService_PublishServer) error
}

func RegisterPublishServiceServer(s *grpc.Server, srv PublishServiceServer) {
	s.RegisterService(&_PublishService_serviceDesc, srv)
}

func _PublishService_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublishServiceServer).Publish(&publishServicePublishServer{stream})
}

type PublishService_PublishServer interface {
	SendAndClose(*Empty) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type publishServicePublishServer struct {
	grpc.ServerStream
}

func (x *publishServicePublishServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publishServicePublishServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PublishService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.PublishService",
	HandlerType: (*PublishServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _PublishService_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0x4d, 0x2a,
	0x2e, 0x4d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd8, 0xb9, 0x58,
	0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x95, 0x8c, 0xb9, 0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0x85, 0x44, 0xb8, 0x58, 0x4b, 0xf2, 0x0b, 0x32, 0x93, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82,
	0x20, 0x1c, 0x21, 0x21, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44, 0x09, 0x26, 0xb0, 0x20, 0x98, 0x6d,
	0x64, 0xcb, 0xc5, 0x17, 0x50, 0x9a, 0x94, 0x93, 0x59, 0x9c, 0x11, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x2a, 0xa4, 0xcd, 0xc5, 0x0e, 0x15, 0x11, 0xe2, 0xd7, 0x83, 0xda, 0x08, 0x35, 0x57, 0x8a,
	0x17, 0x26, 0x00, 0xb6, 0x51, 0x83, 0x31, 0x89, 0x0d, 0xec, 0x16, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x80, 0x35, 0x26, 0x5a, 0x9b, 0x00, 0x00, 0x00,
}
